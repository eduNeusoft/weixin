!
function(t) {
    var e = function(t) {
        var e = t.backingStorePixelRatio || t.webkitBackingStorePixelRatio || t.mozBackingStorePixelRatio || t.msBackingStorePixelRatio || t.oBackingStorePixelRatio || t.backingStorePixelRatio || 1;
        return (window.devicePixelRatio || 1) / e
    } (t),
    i = function(t, e) {
        for (var i in t) t.hasOwnProperty(i) && e(t[i], i)
    },
    n = {
        fillRect: "all",
        clearRect: "all",
        strokeRect: "all",
        moveTo: "all",
        lineTo: "all",
        arc: [0, 1, 2],
        arcTo: "all",
        bezierCurveTo: "all",
        isPointinPath: "all",
        isPointinStroke: "all",
        quadraticCurveTo: "all",
        rect: "all",
        translate: "all",
        createRadialGradient: "all",
        createLinearGradient: "all"
    };
    1 !== e && (i(n,
    function(i, n) {
        t[n] = function(t) {
            return function() {
                var n, r, a = Array.prototype.slice.call(arguments);
                if ("all" === i) a = a.map(function(t) {
                    return t * e
                });
                else if (Array.isArray(i)) for (n = 0, r = i.length; r > n; n++) a[i[n]] *= e;
                return t.apply(this, a)
            }
        } (t[n])
    }), t.stroke = function(t) {
        return function() {
            this.lineWidth *= e,
            t.apply(this, arguments),
            this.lineWidth /= e
        }
    } (t.stroke), t.fillText = function(t) {
        return function() {
            var i = Array.prototype.slice.call(arguments);
            i[1] *= e,
            i[2] *= e,
            this.font = this.font.replace(/(\d+)(px|em|rem|pt)/g,
            function(t, i, n) {
                return i * e + n
            }),
            t.apply(this, i),
            this.font = this.font.replace(/(\d+)(px|em|rem|pt)/g,
            function(t, i, n) {
                return i / e + n
            })
        }
    } (t.fillText), t.strokeText = function(t) {
        return function() {
            var i = Array.prototype.slice.call(arguments);
            i[1] *= e,
            i[2] *= e,
            this.font = this.font.replace(/(\d+)(px|em|rem|pt)/g,
            function(t, i, n) {
                return i * e + n
            }),
            t.apply(this, i),
            this.font = this.font.replace(/(\d+)(px|em|rem|pt)/g,
            function(t, i, n) {
                return i / e + n
            })
        }
    } (t.strokeText))
} (CanvasRenderingContext2D.prototype),
function(t) {
    t.getContext = function(t) {
        return function(e) {
            var i, n, r = t.call(this, e);
            return "2d" === e && (i = r.backingStorePixelRatio || r.webkitBackingStorePixelRatio || r.mozBackingStorePixelRatio || r.msBackingStorePixelRatio || r.oBackingStorePixelRatio || r.backingStorePixelRatio || 1, n = (window.devicePixelRatio || 1) / i, n > 1 && (this.style.height = this.height + "px", this.style.width = this.width + "px", this.width *= n, this.height *= n)),
            r
        }
    } (t.getContext)
} (HTMLCanvasElement.prototype);